scalar ObjectId
scalar Date

type Query {
  hello: String
  user(UserInput: UserInput!): User!
  me: User!
  categories: [Category!]!
  productGroups(
    filter: ProductGroupsFilter
    options: ProductGroupsOptions
  ): [ProductGroup!]!
  products(filter: ProductsFilter, options: ProductsOptions): PaginatedProducts!
  cart: Order!
  exchangeRate(name: String!): ExchangeRate!
  product(productId: ObjectId!): Product!
  productsInProductGroup(productId: ObjectId!): [Product!]!
}

type Mutation {
  sendVerificationCode(
    SendVerificationCodeInput: SendVerificationCodeInput!
  ): Boolean
  confirmVerificationCode(
    ConfirmVerificationCodeInput: ConfirmVerificationCodeInput!
  ): String!
  createCategory(input: CreateCategoryInput!): Category!
  createProductGroup(input: CreateProductGroupInput!): ProductGroup!
  createProduct(input: CreateProductInput!): Product!
  addToCart(input: AddToCartInput!): Order!
  removeFromCart(input: RemoveFromCartInput!): Order!
  updateOrderItemQuantity(input: UpdateOrderItemQuantityInput!): Order!
}

input SendVerificationCodeInput {
  phoneNumber: String!
}

input ConfirmVerificationCodeInput {
  phoneNumber: String!
  verificationCode: String!
}

input UserInput {
  _id: ObjectId!
}

input CreateCategoryInput {
  name: String!
  parentId: ObjectId
  attributeKeys: [AttributeKeyInput!]!
}

input AttributeKeyInput {
  name: String!
  kind: AttributeKind!
}

input CreateProductGroupInput {
  name: String!
  categoryId: ObjectId!
}

input CreateProductInput {
  attributeValues: [AttributeValueInput!]!
  categoryId: ObjectId!
  defaultImageId: ObjectId!
  imageIds: [ObjectId!]!
  name: String!
  price: Float!
  productGroupId: ObjectId!
  quantity: Int!
}

input AttributeValueInput {
  name: String!
  value: String!
}

input ProductsFilter {
  categoryId: ObjectId
  productGroupId: ObjectId
  attributeValues: [AttributeValueInput!]
  isHidden: Boolean
}

input ProductsOptions {
  skip: Int = 0
  limit: Int = 12
  sort: ProductsSort
}

input ProductsSort {
  createdAt: Int
  price: Int
}

input ProductGroupsFilter {
  categoryId: ObjectId
  isHidden: Boolean
}

input ProductGroupsOptions {
  skip: Int = 0
  limit: Int
  sort: ProductGroupsSort
}

input ProductGroupsSort {
  createdAt: Int
  name: Int
}

input AddToCartInput {
  productId: ObjectId!
  quantity: Int!
}

input RemoveFromCartInput {
  orderItemId: ObjectId!
}

input UpdateOrderItemQuantityInput {
  orderItemId: ObjectId!
  quantity: Int!
}

type Pagination {
  skip: Int!
  limit: Int!
  total: Int!
}

enum Permission {
  ADMIN
  PRODUCT
  ACCOUNTING
}

interface UserModel {
  _id: ObjectId!
  name: String
  phoneNumber: String!
  balance: Float!
  permissions: [Permission!]
  currency: String!
}

type User implements UserModel {
  _id: ObjectId!
  name: String
  phoneNumber: String!
  balance: Float!
  permissions: [Permission!]
  currency: String!
}

type VerificationCode {
  _id: ObjectId!
  phoneNumber: String!
  verificationCode: String!
}

enum AttributeKind {
  NUMBER
  STRING
}

type AttributeKey {
  name: String!
  kind: AttributeKind!
}

type AttributeValue {
  name: String!
  value: String!
}

type Category {
  _id: ObjectId!
  name: String!
  parentId: ObjectId
  attributeKeys: [AttributeKey!]!
  isHidden: Boolean
}

interface ProductGroupModel {
  _id: ObjectId!
  name: String!
  categoryId: ObjectId!
  createdAt: Date
  isHidden: Boolean
}

type ProductGroup implements ProductGroupModel {
  _id: ObjectId!
  name: String!
  categoryId: ObjectId!
  createdAt: Date
  isHidden: Boolean
  products: [Product!]!
}

interface ProductModel {
  _id: ObjectId!
  attributeValues: [AttributeValue!]!
  categoryId: ObjectId!
  createdAt: Date
  defaultImageId: ObjectId!
  description: String!
  imageIds: [ObjectId!]!
  isHidden: Boolean
  name: String!
  price: Float!
  productGroupId: ObjectId!
  quantity: Int
}

type Product implements ProductModel {
  _id: ObjectId!
  attributeValues: [AttributeValue!]!
  categoryId: ObjectId!
  createdAt: Date
  defaultImageId: ObjectId!
  description: String!
  imageIds: [ObjectId!]!
  isHidden: Boolean
  name: String!
  price: Float!
  productGroupId: ObjectId!
  quantity: Int
}

type PaginatedProducts {
  results: [Product!]!
  pagination: Pagination!
}

type Image {
  _id: ObjectId!
  name: String
}

type ShippingMethod {
  _id: ObjectId!
  name: String!
}

enum OrderStatus {
  DRAFT
  PLACED
  SHIPPING
  DELIVERED
  CANCELED
}

interface OrderShippingModel {
  _id: ObjectId!
  deliveredAt: Date
  dimension: String
  price: Float!
  shippedAt: Date
  shippingMethodId: ObjectId!
  shippingMethodSnapshot: ShippingMethod!
  weight: String
}

type OrderShipping implements OrderShippingModel {
  _id: ObjectId!
  deliveredAt: Date
  dimension: String
  price: Float!
  shippedAt: Date
  shippingMethodId: ObjectId!
  shippingMethod: ShippingMethod!
  shippingMethodSnapshot: ShippingMethod!
  weight: String
}

interface OrderItemModel {
  _id: ObjectId!
  productId: ObjectId!
  productSnapshot: Product!
  quantity: Int!
  orderId: ObjectId!
}

type OrderItem implements OrderItemModel {
  _id: ObjectId!
  productId: ObjectId!
  product: Product
  productSnapshot: Product!
  quantity: Int!
  orderId: ObjectId!
}

interface OrderModel {
  _id: ObjectId!
  orderShippingId: ObjectId
  userId: ObjectId!
  placedAt: Date
  price: Float!
  status: OrderStatus!
}

type Order implements OrderModel {
  _id: ObjectId!
  orderShippingId: ObjectId
  orderShipping: OrderShipping
  userId: ObjectId!
  user: User
  placedAt: Date
  price: Float!
  status: OrderStatus!
  orderItems: [OrderItem!]!
}

type PaymentMethod {
  _id: ObjectId!
  name: String!
}

type Invoice {
  _id: ObjectId!
  createdAt: Date!
  orderId: ObjectId!
  paid: Int
  paidAt: Date
  paymentMethodId: ObjectId
  paymentMethod: PaymentMethod
  paymentMethodSnapshot: PaymentMethod
  price: Float!
}

interface ExchangeRateModel {
  _id: ObjectId!
  name: String!
  rate: Float!
  updatedAt: Date
}

type ExchangeRate implements ExchangeRateModel {
  _id: ObjectId!
  name: String!
  rate: Float!
  updatedAt: Date
}
